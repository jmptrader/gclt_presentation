Command line tools development in Go

Andrey Romanov
BMC Software

* Advantages of google go for command line tools

* Ease of development/readability

- Very readable specification (http://golang.org/ref/spec)
- Concurrency
.code /presentation/concurrency.go
- Interfaces
- Static typing

* Great standard library

- Compression (bzip2, gzip, lzw)
- Cryptography (sha1, rsa, dsa) (code.google.com/p/go.crypto includes additional cryptographic algorithms)
- Templates
- Http, Rpc, Xml, Json

* Performance

- dl.google.com
- youtube vitess

* One binary

* Arguments parsing

* Args

  package main
  
  import (
  	"fmt"
  	"os"
  )
  
  func main() {
  	fmt.Println(os.Args)
  }
  

* Go flags

  package main
  
  import (
  	"flag"
  	"fmt"
  )
  
  func main() {
  	var dbIp = flag.String("db_ip", "127.0.0.1", "ip address for databse host")
  	flag.Parse()
  	fmt.Printf("Database ip address: %v\n", *dbIp)
  }

* Go flags init

  package main
  
  import (
  	"flag"
  	"fmt"
  )
  
  var dbIp = flag.String("db_ip", "127.0.0.1", "ip address for databse host")
  
  func init() {
  	flag.Parse()
  }
  
  func main() {
  	fmt.Printf("Database ip address: %v\n", *dbIp)
  }

* Flag types

- Bool
- String
- Int
- Uint
- Int64
- Float64
- Duration

* Go flags variables

  package main
  
  import (
  	"flag"
  	"fmt"
  )
  
  func main() {
  	var dbIp string
  	flag.StringVar(&dbIp, "db_ip", "127.0.0.1", "ip address for database host")
  	flag.Parse()
  	fmt.Printf("Database ip address: %v\n", dbIp)
  }

* Print defaults

  package main
  
  import (
  	"flag"
  	"fmt"
  )
  
  func main() {
  	var dbIp string
  	var help bool
  	flag.StringVar(&dbIp, "db_ip", "127.0.0.1", "ip address for database host")
  	flag.BoolVar(&help, "help", false, "show this help message")
  	flag.Parse()
  	if help {
  		flag.PrintDefaults()
  		return
  	}
  	fmt.Printf("Database ip address: %v\n", dbIp)
  }

* Go flagset

  package main
  
  import (
  	"flag"
  	"fmt"
  	"os"
  )
  
  func main() {
  	f := flag.NewFlagSet("flag", flag.ExitOnError)
  	dbIp := f.String("db_ip", "127.0.0.1", "ip address for databse host")
  	help := f.Bool("help", false, "show this help message")
  	f.Parse(os.Args[1:])
  	if *help {
  		f.PrintDefaults()
  		return
  	}
  	fmt.Printf("Database ip address: %v\n", *dbIp)
  }

* Writing tools with git like interface

- git init
- git add
- git commit
- git push

* http.HandleFunc

  func main() {
      http.HandleFunc("/view/", viewHandler)
      http.HandleFunc("/edit/", editHandler)
      http.HandleFunc("/save/", saveHandler)
      http.ListenAndServe(":8080", nil)
  }

* Go flags handler

  package main
  import (
      "github.com/romanoff/gofh"
      "fmt"
      "os"
  )
  func main() {
  	fh := gofh.Init()
  	fh.HandleCommand("init", initProject)
  	fh.HandleCommand("deploy", deployProject)
  	fh.SetDefaultHandler(showUsage)
  	fh.Parse(os.Args[1:])
  }
  func showUsage() {
  	fmt.Println("Please, use 'project init' or 'project deploy' command")
  }
  func initProject(options map[string]string) {
  	fmt.Println("Your init project code goes here")
  }
  func deployProject(options map[string]string) {
  	fmt.Println("Your deploy project code goes here")
  }

* Go flags handler options

  options := []*gofh.Option{
    &gofh.Option{Name: "no-css", Boolean: true}
    &gofh.Option{Name: "db"}
  }

  gofh.HandleCommandWithOptions("init", options, initHandler)
